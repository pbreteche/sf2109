# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    site_name: '%env(SITE_NAME)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

        # Liaison des dépendances par le nom
        bind:
            $primitiveDependency: 'une valeur de type primitif'
            $siteName: '%site_name%'
            $calculator: '@App\Demo\Calculator'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    App\Demo\Calculator:
        class: App\Demo\Calculator
        abstract: false
        arguments: [] # paramètres au constructeur
        public: false # les services avec public "true" sont dépréciés
        tags: {} # nom des tags suivant type spécifique de service

    App\Demo\CalculatorInterface:
        alias: App\Demo\Calculator # alias référencie un identifiant de service existant
        # en utilisant l'alias, on récupère l'ensemble de la config de service
        # s'il n'existe qu'une seule classe de service qui implémente l'interface
        # l'alias est également automatiquement déclaré

    # au cas par cas, possibilité de définir les dépendances de type primitif
    App\Demo\RepositoryDemo:
        arguments: { $primitiveDependency: 'une dépendance de type primitif'}